/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.
*/

//顺序查找
class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) 
    {
        int i = matrix.size() - 1, j = 0;
        
        while (i >= 0 && j < matrix[i].size())
        {
                if (matrix[i][j] > target)
                    --i;
                else if (matrix[i][j] < target)
                    ++j;
                else
                    return true;
        }
        
        return false;
    }
};

//把其当成一个分段之后的有序数组，采用二分法，但是/和%消费更大
class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) 
    {
        int n = matrix.size();
        int m = matrix[0].size();
        int l = 0, r = m * n - 1;
        while (l != r)
        {
            int mid = (l + r - 1) >> 1;
            if (matrix[mid / m][mid % m] < target)
                l = mid + 1;
            else 
                r = mid;
        }
        return matrix[r / m][r % m] == target;
    }
};
