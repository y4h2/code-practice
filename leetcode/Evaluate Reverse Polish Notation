/*
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
*/

//字符串转换算法，可以用atoi(tokens[i].c_str())代替


class Solution {
public:
    int evalRPN(vector<string> &tokens) 
    {
        stack<int> number;
        int temp1 = 0, temp2 = 0;
        
        for (int i = 0; i < tokens.size(); ++i)
        {
            if ( !(tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/"))
            {
                number.push(strToInt(tokens[i]));
            }
            else
            {
                temp1 = number.top();
                number.pop();
                temp2 = number.top();
                number.pop();
                
                if (tokens[i] == "+") 
                    number.push( temp1 + temp2); //注意temp1和temp2的顺序，由于是在栈内操作，所以顺序相反
                else if (tokens[i] == "-") 
                    number.push(temp2 - temp1);
                else if (tokens[i] == "*")
                    number.push( temp2 * temp1);
                else if (tokens[i] == "/")
                    number.push( temp2 / temp1);
            }
        }
        
        return number.top();
    }
    
    int strToInt (string number)
    {
        int flag = 1;
        int result = 0;
        for (int i = 0; i < number.size(); ++i)
        {
            if (number[i] == '-')   
            {
                flag = -1;
            }
            else
            {
                result = result * 10 + (number[i] - '0');
            }
        }
        return result * flag;
    }
};
