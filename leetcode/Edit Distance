/*
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
*/

/*
Use f[i][j] to represent the shortest edit distance between word1[0,i) and word2[0, j). Then compare the last character of word1[0,i) and word2[0,j), which are c and d respectively (c == word1[i-1], d == word2[j-1]):

if c == d, then : f[i][j] = f[i-1][j-1]

Otherwise we can use three operations to convert word1 to word2:

(a) if we replaced c with d: f[i][j] = f[i-1][j-1] + 1;

(b) if we added d after c: f[i][j] = f[i][j-1] + 1;

(c) if we deleted c: f[i][j] = f[i-1][j] + 1;
*/

//由于dp算法中，经常需要考虑到取0的情况，所以实际长度需要加1

class Solution {
public:
    int minDistance(string word1, string word2) 
    {
        vector<vector<int> > dp (word1.size() + 1, vector<int> (word2.size() + 1, 0));
        for (int i = 0; i <= word1.size(); ++i)
            dp[i][0] = i;
        for (int i = 0; i <= word2.size(); ++i)
            dp[0][i] = i;
        
        for (int i = 1; i <= word1.size(); ++i)
        {
            for (int j = 1; j <= word2.size(); ++j)
            {
                int ins = dp[i - 1][j] + 1;
                int del = dp[i][j - 1] + 1;
                int rep = dp[i - 1][j - 1];
                if (word1[i - 1] != word2[j - 1])
                    rep += 1;
                
                dp[i][j] = min (min (ins, del), rep);
            }
        }
        
        return dp[word1.size()][word2.size()];
    }
};
