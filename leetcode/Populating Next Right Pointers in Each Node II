/*
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
*/


/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) 
    {
        TreeLinkNode *pCur = root;
        TreeLinkNode *head = NULL, *prev = NULL;
        
        while (pCur != NULL)
        {
            while (pCur != NULL)
            {
                if (pCur->left != NULL)
                {
                    if (prev != NULL)
                    {
                        prev->next = pCur->left;
                    }   
                    else
                    {
                        head = pCur->left;
                    }
                    prev = pCur->left; //相比prev = prev->next更为通用
                }
                
                
                if (pCur->right != NULL)
                {
                    if (prev != NULL)
                    {
                        prev->next = pCur->right;
                    }
                    else
                    {
                        head = pCur->right;
                    }
                    prev = pCur->right;
                }
                
                pCur = pCur->next; //后面没有值则进入下一层
                
            }
            
            pCur = head;
            head = NULL;
            prev = NULL;
            
        }
        
    }
};
