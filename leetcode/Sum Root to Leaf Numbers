/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.
*/
//要明确递归时，函数的功能
//只在叶子节点处理数据，把叶子结点作为结束条件

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode *root) 
    {
        if (root == NULL) return 0;
        if (root->left == NULL && root->right == NULL)
            return root->val;
        int result = 0;
        if (root->left != NULL)
        {
            root->left->val += root->val * 10;
            result += sumNumbers(root->left);
        }
        if (root->right != NULL)
        {
            root->right->val += root->val * 10;
            result += sumNumbers(root->right);
        }
        
        
        return result;    
    }
};
