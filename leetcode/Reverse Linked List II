/*
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
*/

//例： 1->2->3->4->5->6 ，m=2, n = 5
//第一步 1->3->2->4->5->6;
//第二步 1->4->3->2->5->6
//第三步 1->5->4->3->2->6

//注意指针初始化， ListNode *dummyHead = new ListNode(0);
//如果ListNode *dummyHead(0);则会初始化失败，因为这时还是一个空指针

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) 
    {
        if (head == NULL) return NULL;
        if (head->next == NULL) return head;
        if (m == n) return head;
        
        ListNode *dummyHead = new ListNode(0);
        dummyHead->next = head;
        ListNode *mPre = dummyHead;
        
        int countM = m, countN = n - m;
        
        while(--countM)
            mPre = mPre->next;
            
        ListNode *change = mPre->next;
        
        while (countN--)
        {
            ListNode *nodeN = change->next;
            
            change->next = nodeN->next;
            nodeN->next = mPre->next;
            mPre->next = nodeN;
        }
        
        
        return dummyHead->next;
    }
};
