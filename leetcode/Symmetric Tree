/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
//用两个queue分别存储结点即可，因为不用分层，所以不存在swap的问题



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode *root) 
    {
        if (root == NULL) return true;
        queue <TreeNode *> q1, q2;
        if (root->left != NULL && root->right != NULL)
        {
            q1.push(root->left);
            q2.push(root->right);
        }
        else if (root->left != NULL || root->right != NULL) return false;
        else return true;
        
        TreeNode *n1, *n2;
        
        while (!q1.empty() && !q2.empty())
        {
            n1 = q1.front();
            n2 = q2.front();
            q1.pop();
            q2.pop();
            if (n1->val == n2->val)
            {
                if (n1->left != NULL && n2->right != NULL)
                {
                    q1.push(n1->left);
                    q2.push(n2->right);
                }
                else if (n1->left != NULL || n2->right != NULL)
                    return false;

                if (n1->right != NULL && n2->left != NULL)
                {
                    q1.push(n1->right);
                    q2.push(n2->left);
                }
                else if (n1->right != NULL || n2->left != NULL)
                    return false;
            }
            else
                return false;
        }
        

        return true;
    }
};
