/*
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.
*/

//注意：末尾的指针一定要把next赋值为NULL
//链表一定要画图

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *partition(ListNode *head, int x) 
    {
        if (head == NULL || head->next == NULL) return head;
        
        ListNode *p = head;
        ListNode *greatHead = new ListNode(0), *smallHead = new ListNode(0);
        smallHead->next = head;
        ListNode *great = greatHead, *small = smallHead;
        
        while (p != NULL)
        {
            if (p->val >= x )
            {
                great->next = p;
                great = great->next;
                p = p->next; //后面两句顺序一定不能颠倒，great这时和p指向的是同一个位置
                great->next = NULL;
            }
            else
            {
                small->next = p;
                small = small->next;
                p = p->next;
            }
        }
        small->next = greatHead->next;        
        
        
        return smallHead->next;
    }
};
