/*
Sort a linked list using insertion sort.
*/
//插入排序定义，每次从无序序列中选取一个元素，插入到有序序列的正确位置，无序序列为空时，则完成排序
//有时间完成另外一种写法
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *insertionSortList(ListNode *head) 
    {
        if (head == NULL) return NULL;
        if (head->next == NULL) return head;
        
        ListNode *dummyHead = new ListNode(0);
        dummyHead->next = head;//也是有序序列的头
        ListNode *pCur = head->next; //pCur从第二个结点开始遍历，到达链表尾部时，则排序完成
        head->next = NULL; //NULL之前的为有序结点
        ListNode *pCompare = dummyHead; //用于与pCur比较的节点

        while (pCur != NULL)
        {
            ListNode *pNext = pCur->next; //记录pCur的下一个位置，即无序序列的开始
            pCur->next == NULL; //防止环的出现
            pCompare = dummyHead;
            
            while (pCompare->next != NULL && pCur->val >= pCompare->next->val)
                pCompare = pCompare->next;
            pCur->next = pCompare->next;
            pCompare->next = pCur;
            
            
            pCur = pNext;
        }

        return dummyHead->next;
    }
};




/*            while (pCompare->next != NULL) //把空作为有序序列的截止条件
            {
                if (pCur->val < pCompare->next->val)
                {
                    pCur->next = pCompare->next;
                    pCompare->next = pCur;
                    break;
                }
                else
                {
                    pCompare = pCompare->next;
                }
                if (pCompare->next == NULL)
                {
                    pCur->next = pCompare->next;
                    pCompare->next = pCur;
                }
 
            }
            */
            
