/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
*/

//做法和1基本相同，但是要考虑障碍的设置
//初始化第一行和第一列时，遇到障碍之后，后面的dp全设为0
//其他的dp元素，都为行加列，如果当前位置有障碍则设为0

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) 
    {
        if ( 0 ==obstacleGrid.size()) return 0;
        vector<vector<int> > dp(obstacleGrid.size(), vector<int>(obstacleGrid[0].size(), -1));
        //dp表示当前位置的走法
        int original = 1;
        for (int i = 0; i < obstacleGrid.size(); ++i)
        {
            if (1 == obstacleGrid[i][0])
            {
                original = 0;
            }
            dp[i][0] = original;
                
        }
        original = 1;
        for (int i = 0; i < obstacleGrid[0].size(); ++i)
        {
            if (1 == obstacleGrid[0][i])
            {
                original = 0;
            }
            dp[0][i] = original;
        }
        
        if (obstacleGrid.size() == 1)
            return dp[0][obstacleGrid[0].size() - 1];
        if (obstacleGrid[0].size() == 1)
            return dp[obstacleGrid.size() - 1][0];
            
        for (int i = 1; i < obstacleGrid.size(); ++i)
        {
            for (int j = 1; j < obstacleGrid[0].size(); ++j)
            {
                if (obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else if (-1 == dp[i][j])
                {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        
        return dp[obstacleGrid.size() - 1][obstacleGrid[0].size() - 1];
    }
};
