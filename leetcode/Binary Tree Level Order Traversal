/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
//由于结果是分层的，用两个队列即可
//注意队列取首元素为q.front();

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) 
    {
        vector<vector<int> > result;
        if (root == NULL) return result;
        queue <TreeNode *> cur, next;
        TreeNode* pCur = root;
        vector <int> buffer;
        
        cur.push(root);
        
        while (!cur.empty())
        {
            pCur = cur.front();
            buffer.push_back(pCur->val);
            cur.pop();
            if (pCur->left != NULL)
            {
                next.push(pCur->left);
            }
            if (pCur->right != NULL)
            {
                next.push(pCur->right);
            }
            
            if (cur.empty())
            {
                swap(cur, next);// awesome c++11 feature: constant swap
                result.push_back(buffer);
                buffer.clear();
            }
            
        }
  
    }
};
