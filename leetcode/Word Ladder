/*
Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
*/

//BFS的特征，使用FIFO队列
//BFS本身保证了它必然第一个找到的值就是最小值，因为BFS是按层遍历的


class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) 
    {
        if (dict.count(start) == 0 || dict.count(end) == 0) return 0;
        if (start == end) return 0;
        
        queue<string> word;
        unordered_map <string, int> step;
        word.push(start);
        step[start] = 1; //步数包括start和end；
        
        while (!word.empty())
        {
            string temp = word.front();
            word.pop();
            for (int i = 0; i < start.size(); ++i)
            {
                if (temp == end) 
                    break;
                for (int j = 0; j < 26; ++j )
                {
                    string newTemp = temp;
                    newTemp[i] = 'a' + j;
                    if (dict.count(newTemp) == 1 && step.count(newTemp) == 0) //防止取到重复的值
                    {
                        word.push(newTemp);
                        step[newTemp] = step[temp] + 1;
                    }
                }
            }
        }
        
        return step[end];
    }
};
