/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/
//分治，缩小规模


class Solution {
public:
    vector<int> searchRange(int A[], int n, int target) 
    {
        vector<int> result;
        result.push_back(-1);
        result.push_back(-1);
        
        int index = binarySearch(A, 0, n - 1, target);
        if (index != -1)
        {
            int l = index;
            int r = index;
            result[0] = l;
            result[1] = r;
            while((l = binarySearch(A, 0, l - 1, target)) != -1) result[0] = l;
            while((r = binarySearch(A, r + 1, n -1, target)) != -1) result[1] = r;
        }
        
        
        return result;
    }
    
    int binarySearch (int A[], int left, int right, int target)
    {
        int mid;
        while (left <= right)
        {
            mid = (left + right) / 2;
            if (A[mid] < target)
            {
                left = mid + 1;
            }
            else if (A[mid] > target)
            {
                right = mid - 1;
            }
            else return mid;
        }
        return -1;
    }
};
