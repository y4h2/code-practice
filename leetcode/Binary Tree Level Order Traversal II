/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
//做法与1相同，在最后用一个stack<vector<itn> >结构暂存一下结果即可，然后重新存入结果即可

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) 
    {
        vector <vector<int> > result;
        if (root == NULL) return result;
        
        queue <TreeNode *> cur, next;
        TreeNode* pCur = root;
        stack<vector<int> > temp;
        vector<int> buffer;
        
        cur.push(root);
        
        while (!cur.empty())
        {
            pCur = cur.front();
            buffer.push_back(pCur->val);
            cur.pop();
            if (pCur->left != NULL)
                next.push(pCur->left);
            if (pCur->right != NULL)
                next.push(pCur->right);
            
            if (cur.empty())
            {
                swap(cur, next);
                temp.push(buffer);
                buffer.clear();
            }
        }
        
        while (!temp.empty())
        {
            result.push_back(temp.top());
            temp.pop();
        }
        
        
        return result;
    }
};

