/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.
*/
//不能再用之前的方法，因为之前判断轴心的时候，是因为轴心是最小值，现在由于可能存在多个最小值，轴心的位置不定，对于最后的结果页是不定的


class Solution {
public:
    bool search(int A[], int n, int target) 
    {
        int l = 0, r = n - 1;
        while (l <= r)
        {
            int mid = (l + r) / 2;
            if (A[mid] == target)
                return true;
            if (A[l] < A[mid]) // left is sorted
            {
                if (A[mid] > target && target >= A[l]) //注意等号的取舍，要确定target被包含在区间内，否则在另外一个区间
                    r = mid - 1;
                else
                    l = mid + 1;
            }
            else if (A[mid] < A[l]) //right is sorted
            {
                if (A[mid] < target && target <= A[r])
                    l = mid + 1;
                else
                    r = mid - 1;
            }
            else
                ++l;
        }
        
        return false;
        
    }
};
