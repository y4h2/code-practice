/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
*/
//先找轴心，再找元素在轴心的左边还是右边，最后用二分法解决
//二分法的判断条件不要弄错，while(i <= j) 是否取等号考虑一下只有一个元素的情况即可想明白

class Solution {
public:
    int search(int A[], int n, int target) 
    {
        int index = findPivot(A, n);
        int i = 0, j = 0;
        if (target > A[n - 1])
        {
            i = 0;
            j = index - 1;
        }
        else if (target < A[n - 1])
        {
            i = index;
            j = n - 1;
        }
        else
            return n - 1;

        
        while (i <= j)
        {
            int mid = (i + j) / 2;
            if (A[mid] < target)
            {
                i = mid + 1;
            }
            else if (A[mid] > target)
            {
                j = mid - 1;
            }
            else
                return mid;
        }
        
        return -1;
    }
    
    
    int findPivot(int *A, int n)
    {
        int i = 0, j = n - 1;
        while (A[i] > A[j])
        {
            int mid = (i + j) >> 1;
            if (A[mid] >= A[i])
            {
                i = mid + 1;
            }
            else if (A[mid] < A[i])
            {
                j = mid;
            }
        }
        return i;
    }
};
