/*
Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.
*/
//在题1的基础上增加了可能有重复元素的情况
//solution 1
class Solution {
public:
    int findMin(vector<int> &num) 
    {
        if (num.empty()) return 0;
        if (num.size() == 1) return num[0];  //except these two situations
        if (num.size() == 2) return num[0] < num[1] ? num[0] : num[1];  
        
        num.insert(num.begin(), num[num.size() - 1]);
        
        for (int i = 0; i + 1 < num.size(); ++i)
        {
            if (num[i] > num[i + 1])
                return num[i + 1];
        }
        
        return num[0];//当所有元素相同时，返回任意一个即可
        
    }
};


//solution 2
public int findMin(int[] A) {
   int L = 0, R = A.length - 1;
   while (L < R && A[L] >= A[R]) {
      int M = (L + R) / 2;
      if (A[M] > A[R]) {
         L = M + 1;
      } else if (A[M] < A[L]) {
         R = M;
      } else {   // A[L] == A[M] == A[R]
         L = L + 1;
      }
   }
   return A[L];
}
