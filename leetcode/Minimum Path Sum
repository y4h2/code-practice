/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
*/

class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) 
    {
        if (grid.size() == 0) return 0;
        
        vector<vector<int> > dp(grid); //dp中存储到当前位置路径的最小值
        
        dp[0][0] = grid[0][0];
        for (int i = 0; i + 1 < grid.size(); ++i)
        {
            dp[i + 1][0] = dp[i][0] + grid[i + 1][0];
        }
        for (int j = 0; j + 1 < grid[0].size(); ++j)
        {
            dp[0][j + 1] = dp[0][j] + grid[0][j + 1];
        }
        
        for (int i = 1; i < grid.size(); ++i)
        {
            for (int j = 1; j < grid[0].size(); ++j)
            {
                dp[i][j] = min (dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        
        return dp[grid.size() - 1][grid[0].size() - 1];
    }
};
