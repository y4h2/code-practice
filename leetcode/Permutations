/*
Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/

class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) 
    {
        vector<vector<int> > result(1, vector<int>() );
        
        for (int index = 0; index < num.size(); ++index)
        {
            vector<vector<int> > temp(result); //需要两个vector<vector<int> >类的变量作为缓冲
            result.clear();
            for (int i = 0; i < temp.size(); ++i)
            {   
                for (int offset = 0; offset < temp[i].size() + 1; ++offset) //集合中没有重复元素，每次往不同的位置插入新元素即可，从0开始构造
                {
                    vector<int> buffer(temp[i]);
                    buffer.insert(buffer.begin() + offset, num[index]);
                    result.push_back(buffer);
                }
            }
        }
        
        return result;
    }
};
