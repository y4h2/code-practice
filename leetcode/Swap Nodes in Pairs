/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) 
    {
        ListNode *pCur, *dummyHead = new ListNode(0);
        dummyHead->next = head;
        pCur = dummyHead;
        while (pCur->next != NULL && pCur->next->next != NULL)
        {
            pCur->next = swap(pCur->next, pCur->next->next); //注意，返回的时候一定要传给pCur->next,不然链表就断了
            pCur = pCur->next->next;
        }
        return dummyHead->next;
    }
    
    ListNode *swap (ListNode *p, ListNode *q)
    {
        p->next = q->next;
        q->next = p;
        
        return q; //这里一定要返回q，也就是交换之后的前面的节点，因为这时候要把它跟前面的结点连起来
    }
};
