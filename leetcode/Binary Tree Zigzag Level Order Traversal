/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
//一旦出现逆序的，第一就要相当stack，然后要始终保持思维清晰，不要过度使用数据结构
//这题是从按层遍历扩展出来的



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) 
    {
        vector<vector<int> > result;
        if (root == NULL) return result;
        
        vector<int> buffer;
        TreeNode *pCur = root;
        queue<TreeNode *> cur, next;
        int flag = 0;
        stack <int> s; // store the data

        
        cur.push(root);
        
        while (!cur.empty())
        {
            if (flag % 2 == 0)
            {
                pCur = cur.front();
                cur.pop();
                buffer.push_back(pCur->val);
                if (pCur->left != NULL)
                {
                    next.push(pCur->left);
                }
                if (pCur->right != NULL)
                {
                    next.push(pCur->right);
                }
            }
            else
            {
                pCur = cur.front();
                cur.pop();
                s.push(pCur->val);
 
                if (pCur->left != NULL)
                {
                    next.push(pCur->left);
                }
                if (pCur->right != NULL)
                {
                    next.push(pCur->right);
                }
            }
            
            if (cur.empty())
            {
                while (!s.empty())
                {
                    buffer.push_back(s.top());
                    s.pop();
                }
                ++flag;
                swap (cur, next);
                result.push_back(buffer);
                buffer.clear();
            }
        }
        
        return result;
    }
};
