/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
*/

//主要运用DFS算法解决
//注意全局变量的转换方法


class Solution {
public:
    bool exist(vector<vector<char> > &board, string word) 
    {
        if (board.size() == 0) return false;
        
        used = new bool*[board.size()];
        this->board = &board;
        this->word = &word;
        
        for (int i = 0; i < board.size(); ++i)
        {
            used[i] = new bool [board[i].size()];
            for (int j = 0; j < board[i].size(); ++j)
            {
                used[i][j] = false;
            }
        }
        
        for (int i = 0; i < board.size(); ++i)
        {
            for (int j = 0; j < board[i].size(); ++j)
            {
                if (DFS(i, j, 0))
                    return true;
            }
        }
        
        return false;
    }
    
    bool isInBoard (int i, int j)
    {
        if (i < 0) return false;
        if (i >= board->size()) return false;
        if (j < 0) return false;
        if (j >= (*board)[i].size()) return false; //board是vector<vector<char> >的指针，先要取地址才能进行操作
        
        return true;
    }
    
    bool DFS(int si, int sj, int n)
    {
        if (n == (*word).size()) return true;
        if (isInBoard(si, sj))
        {
            if (!used[si][sj] && (*board)[si][sj] == (*word)[n])
            {
                used[si][sj] = true;
                bool ret = false;
                if (DFS(si + 1, sj, n + 1))
                    ret = true;
                else if (DFS(si, sj + 1, n + 1))
                    ret = true;
                else if (DFS(si - 1, sj, n + 1))
                    ret = true;
                else if (DFS(si, sj - 1, n + 1))
                    ret = true;
                used[si][sj] = true;
                return ret;
            }
        }
        
        return false;
    }
    
private:
    bool **used;
    vector<vector<char> > *board;
    string *word;
};
