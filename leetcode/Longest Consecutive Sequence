/*
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.
*/

//元素全部存入unordered_map<int, bool> bool变量标记是否已访问，每次寻找当前元素的+1和-1元素

class Solution {
public:
    int longestConsecutive(vector<int> &num) 
    {
        unordered_map <int, bool> number;
        typedef pair<int,bool> umpair;
        for (int i = 0; i < num.size(); i++)
        {
            number.insert(umpair(num[i], false));
        }
        
        int maxLen = 0;
        for (auto index = number.begin(); index != number.end(); ++index)
        {
            if (index->second == true)
                continue;
            int len = 1;
            auto temp = index;
            temp->second = true;
            
            while (number.find(temp->first - 1) != number.end())
            {
                ++len;
                temp = number.find(temp->first - 1);
                temp->second = true;
            }
            
            temp = index;
            
            while (number.find(temp->first + 1) != number.end())
            {
                ++len;
                temp = number.find(temp->first + 1);
                temp->second = true;
            }
            
            if (len > maxLen)
                maxLen = len;
        }
        
        return maxLen;
    }
};
