/*
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, return the emtpy string "".

If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.
*/

//遍历两遍，第一次遍历找到第一次出现完整window的最后一个出现的字符的位置
//第二次i和j配合寻找下一个字符，用两个hash表判断是否是当前字符的下一个位置

class Solution {
public:
    string minWindow(string S, string T) 
    {
        if (S.empty() || T.empty())
            return "";
        int require[128] = {0};
        bool exist[128] = {false};
        int minLen = INT_MAX;
        int minIdx = 0;
        int i = -1;
        int j = 0;
        int count = T.size();
        
        for (int i = 0; i < count; ++i)
        {
            ++require[T[i]];
            exist[T[i]] = true;
        }
        
        while (i < (int)S.size() && j < S.size()) //S.size()返回size_t类型，size_t是unsigned int型，负数和它比较，一般都会比它大
        {
            if (count > 0)
            {
                ++i;
                --require[S[i]];
                if (exist[S[i]] && require[S[i]] >= 0)
                {
                    --count;
                }
            }
            else
            {
                if (minLen > i - j + 1)
                {
                    minLen = i - j + 1;
                    minIdx = j;
                }
                ++require[S[j]];
                if (exist[S[j]] && require[S[j]] > 0)
                {
                    ++count;
                }
                ++j;
            }
        }
        
        if (minLen == INT_MAX)
            return "";
        return S.substr(minIdx, minLen);
        
    }
};

