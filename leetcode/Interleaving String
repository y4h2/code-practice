/*
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

For example,
Given:
s1 = "aabcc",
s2 = "dbbca",

When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.
*/

/*
设状态 f[i][j]，表示 s1[0,i] 和 s2[0,j]，匹配 s3[0, i+j]。如果 s1 的最后一个字符等
于 s3 的最后一个字符，则 f[i][j]=f[i-1][j]；如果 s2 的最后一个字符等于 s3 的最后一个字符，
则 f[i][j]=f[i][j-1]。因此状态转移方程如下：
f[i][j] = (s1[i - 1] == s3 [i + j - 1] && f[i - 1][j])
|| (s2[j - 1] == s3 [i + j - 1] && f[i][j - 1]);
*/

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) 
    {
        if (s1.size() + s2.size() != s3.size())
            return false;
            
        vector<vector<bool> > dp(s1.size() + 1, vector<bool> (s2.size() + 1, false));
        dp[0][0] = true;
        
        for (int i = 1; i <= s1.size(); ++i)
        {
            dp[i][0] = dp[i - 1][0] && s3[i - 1] == s1[i - 1];
        }
        
        for (int i = 1; i <= s2.size(); ++i)
        {
            dp[0][i] = dp[0][i - 1] && s3[i - 1] == s2[i - 1];
        }
        
        for (int i = 1; i <= s1.size(); ++i)
        {
            for (int j = 1; j <= s2.size(); ++j)
            {
                dp[i][j] = (dp[i - 1][j] && s3[i + j - 1] == s1[i - 1]) || (dp[i][j - 1] && s3[i + j - 1] == s2[j - 1]);
            }
        }
        
        return dp[s1.size()][s2.size()];
    }
};
