/*
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/
//DP不一定需要递归，只要把优化表完成，就可以得到正确答案


class Solution {
public:
    int numTrees(int n) 
    {
        if (n <= 1) return n;
        vector<int> array(n + 1, 0);
        array[0] = 1;
        for (int i = 1; i <= n; ++i)
        {
            for (int k = 0; k <= i - 1; ++k)
            {
                array[i] += array[k] * array[i - (k + 1)];
            }
        }
        
        return array[n];
    }
};
